#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1091 0 28 3 15 #"#lang slideshow"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 138
(
 #";When you type an expression after the > in the interactions window "
 #"and hit Enter, DrRacket evaluates the expression and prints its resu"
 #"lt"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";> \"art gallery\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";> 5"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";An expression can also be a function call"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";> (circle 10)"
0 0 24 29 1 #"\n"
0 0 17 3 142
(
 #";A result from the circle function is a picture value, which prints "
 #"as an expression result in much the same way that numbers or strings"
 #" print"
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";To use a particular circle and rectangle picture many times, it\342"
 #"\200\231s simpler to give them names"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(hc-append c r)"
0 0 24 29 1 #"\n"
0 0 17 3 132
(
 #";hc-append function accepts an optional number argument before the p"
 #"icture arguments, and it accepts any number of picture arguments"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";(hc-append 20 c r c)"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 198
(
 #";A function definition uses define, just like our shape definitions,"
 #" but with an open parenthesis before the function name, and names fo"
 #"r the function arguments before the matching close parenthesis"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";The syntax of the definition mirrors the syntax of a function call"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(square 10)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"filled-rectangle"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"lackingRectangle"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"filled-rectangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";hc-append function that combines pictures"
0 0 24 29 1 #"\n"
0 0 17 3 153
(
 #";move the text caret to the name hc-append and press the F1 key in D"
 #"rRacket. A browser window will open, and it will give you a link to "
 #"the documentation"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";The define form can be used in some places to create local bindings"
 #". For example, it can be used inside a function body"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"four"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"two-p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"vc-append"
0 0 24 3 1 #" "
0 0 14 3 5 #"two-p"
0 0 24 3 1 #" "
0 0 14 3 5 #"two-p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (four (circle 10))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"twoRowsOfThreeCircles"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"oneRowCircle"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vc-append"
0 0 24 3 1 #" "
0 0 14 3 12 #"oneRowCircle"
0 0 24 3 1 #" "
0 0 14 3 12 #"oneRowCircle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #"> "
0 0 17 3 1 #"("
0 0 17 3 22 #"twoRowsOfThreeCircles)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 141
(
 #";More typically, Racketeers use the let or let* form for local bindi"
 #"ng. An advantage of let is that it can be used in any expression pos"
 #"ition"
) 0 0 24 29 1 #"\n"
0 0 17 3 5 #";Also"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #" "
0 0 17 3 5 #"binds"
0 0 17 3 1 #" "
0 0 17 3 4 #"many"
0 0 17 3 1 #" "
0 0 17 3 11 #"identifiers"
0 0 17 3 1 #" "
0 0 17 3 2 #"at"
0 0 17 3 1 #" "
0 0 17 3 4 #"once"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 7 #"instead"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 9 #"requiring"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 8 #"separate"
0 0 17 3 1 #" "
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 4 #"each"
0 0 17 3 11 #" identifier"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"checker"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"p12"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 3 #"p21"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vc-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"p12"
0 0 24 3 1 #" "
0 0 14 3 3 #"p21"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";> (checker (colorize (square 10) \"red\") ("
0 0 17 3 8 #"colorize"
0 0 17 3 8 #" (square"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 2 #") "
0 0 17 3 9 #"\"black\"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 41 #"threeCirclesTwoRectanglesTwoFilledCircles"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"threeC"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"twoR"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 5 #"twoFC"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"filled-ellipse"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"vc-append"
0 0 24 3 1 #" "
0 0 14 3 6 #"threeC"
0 0 24 3 1 #" "
0 0 14 3 4 #"twoR"
0 0 24 3 1 #" "
0 0 14 3 5 #"twoFC"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 2 #" ("
0 0 17 3 42 #"threeCirclesTwoRectanglesTwoFilledCircles)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 170
(
 #";A let form binds many identifiers at the same time, so the bindings"
 #" cannot refer to each other. The let* form, in contrast, allows late"
 #"r bindings to use earlier bindings"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"checkerboard"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 2 #"rp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"colorize"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 2 #"bp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"colorize"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 7 #"checker"
0 0 24 3 1 #" "
0 0 14 3 2 #"rp"
0 0 24 3 1 #" "
0 0 14 3 2 #"bp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 2 #"c4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"four"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"four"
0 0 24 3 1 #" "
0 0 14 3 2 #"c4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";> (checkerboard (square 10))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"trickyLetStarDrawing"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 6 #"threeC"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 13 #"threeTwoThree"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 14 3 6 #"threeC"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 6 #"threeC"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"vc-append"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 6 #"threeC"
0 0 24 3 1 #" "
0 0 14 3 13 #"threeTwoThree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 2 #" ("
0 0 17 3 21 #"trickyLetStarDrawing)"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";Functions are Values"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";Instead of calling circle as a function, try evaluating just circle"
 #" as an expression:"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 7 #" circle"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";#<procedure:circle>"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";That is, the identifier circle "
 #"is bound to a function (a.k.a. \342\200\234procedure\342\200\235), j"
 #"ust like c is bound to a circle."
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";Unlike"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"circle"
0 0 17 3 1 #" "
0 0 17 3 7 #"picture"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 9 #"there\342\200\231s"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"simple"
0 0 17 3 1 #" "
0 0 17 3 3 #"way"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 10 #"completely"
0 0 17 3 1 #" "
0 0 17 3 8 #"printing"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"so"
0 0 17 3 1 #" "
0 0 17 3 8 #"DrRacket"
0 0 17 3 1 #" "
0 0 17 3 4 #"just"
0 0 17 3 1 #" "
0 0 17 3 6 #"prints"
0 0 17 3 20 #" #<procedure:circle>"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";This"
0 0 17 3 1 #" "
0 0 17 3 7 #"example"
0 0 17 3 1 #" "
0 0 17 3 5 #"shows"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 9 #"functions"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 6 #"values"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"just"
0 0 17 3 1 #" "
0 0 17 3 4 #"like"
0 0 17 3 1 #" "
0 0 17 3 7 #"numbers"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 9 #" pictures"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";Since functions are values, you can define functions that accept ot"
 #"her functions as arguments"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";mk is a function. You can tell by looking at how it is surrounded b"
 #"y parens"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";mk is a function that takes in a number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"series"
0 0 24 3 1 #" "
0 0 14 3 2 #"mk"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"hc-append"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";> (series circle)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"borderize"
0 0 24 3 1 #" "
0 0 14 3 16 #"thingToBorderize"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"thingToBorderize"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 23 3 14 #"#:border-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 12 #"> (borderize"
0 0 17 3 8 #" circle)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"variableBorderize"
0 0 24 3 1 #" "
0 0 14 3 16 #"thingToBorderize"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"thingToBorderize"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 23 3 14 #"#:border-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"> (variableBorderize"
0 0 17 3 7 #" circle"
0 0 17 3 1 #" "
0 0 17 3 3 #"20)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"borderme"
0 0 24 3 1 #" "
0 0 14 3 13 #"thingToBorder"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 9 #"thickness"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"thingToBorder"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 23 3 14 #"#:border-width"
0 0 24 3 1 #" "
0 0 14 3 9 #"thickness"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #"> "
0 0 17 3 1 #"("
0 0 17 3 8 #"borderme"
0 0 17 3 1 #" "
0 0 17 3 6 #"circle"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 116
(
 #";When calling a function that accepts a function argument, the argum"
 #"ent function often isn\342\200\231t needed anywhere else."
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";Having"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 5 #"write"
0 0 17 3 1 #" "
0 0 17 3 4 #"down"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 3 #"via"
0 0 17 3 1 #" "
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 5 #"would"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"hassle"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 7 #"because"
0 0 17 3 1 #" "
0 0 17 3 3 #"you"
0 0 17 3 1 #" "
0 0 17 3 4 #"have"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 4 #"make"
0 0 17 3 1 #" "
0 0 17 3 2 #"up"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"name"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 4 #"find"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"place"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"put"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 11 #"definition."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";The"
0 0 17 3 1 #" "
0 0 17 3 11 #"alternative"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"use"
0 0 17 3 1 #" "
0 0 17 3 6 #"lambda"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 7 #"creates"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 18 #"anonymous function"
0 0 24 29 1 #"\n"
0 0 17 3 139
(
 #";The parenthesized names after a lambda are the arguments to the fun"
 #"ction, and the expression after the argument names is the function b"
 #"ody"
) 0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #";Using the word \342\200\234lambda"
 #"\342\200\235 instead of \342\200\234functio"
 #"n\342\200\235 or \342\200\234procedure\342\200\235 i"
 #"s part of Racket\342\200\231s history and culture"
) 0 0 24 29 1 #"\n"
0 0 17 3 3 #";>("
0 0 17 3 6 #"series"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 4 #"size"
0 0 17 3 3 #") ("
0 0 17 3 12 #"checkerboard"
0 0 17 3 2 #" ("
0 0 17 3 6 #"square"
0 0 17 3 1 #" "
0 0 17 3 8 #"size))))"
0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #";In this case the size is going to be supplied by the series functio"
 #"n. It will feed 5, 10, and 20 to the checkerboard function"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 1 #"("
0 0 17 3 6 #"series"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 4 #"size"
0 0 17 3 28 #") (variableBorderize circle "
0 0 17 3 7 #"size)))"
0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #";In this case the size (again being fed in from hardcoded values in "
 #"the series function) is being fed into the circle function"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";Lexical Scope"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";Racket is a lexically scoped language, which means that whenever an"
 #" identifier is used as an expression,"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";something"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 7 #"textual"
0 0 17 3 1 #" "
0 0 17 3 11 #"environment"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 10 #"expression"
0 0 17 3 1 #" "
0 0 17 3 10 #"determines"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 14 #"identifier\342\200\231s"
0 0 17 3 9 #" binding."
0 0 24 29 1 #"\n"
0 0 17 3 5 #";This"
0 0 17 3 1 #" "
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 7 #"applies"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 11 #"identifiers"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 17 3 4 #"body"
0 0 17 3 1 #" "
0 0 17 3 2 #"as"
0 0 17 3 1 #" "
0 0 17 3 4 #"well"
0 0 17 3 1 #" "
0 0 17 3 2 #"as"
0 0 17 3 1 #" "
0 0 17 3 8 #"anywhere"
0 0 17 3 6 #" else."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";mk in each lambda form refer to the argument of rgb-series, since t"
 #"hat\342\200\231s the binding that is textually in scope"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rgb-series"
0 0 24 3 1 #" "
0 0 14 3 2 #"mk"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"vc-append"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"series"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sz"
0 0 24 3 3 #") ("
0 0 14 3 8 #"colorize"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 14 3 2 #"sz"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"red\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"series"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sz"
0 0 24 3 3 #") ("
0 0 14 3 8 #"colorize"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 14 3 2 #"sz"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"series"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sz"
0 0 24 3 3 #") ("
0 0 14 3 8 #"colorize"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 14 3 2 #"sz"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"blue\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";> (rgb-series "
0 0 17 3 7 #"circle)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";> "
0 0 17 3 1 #"("
0 0 17 3 10 #"rgb-series"
0 0 17 3 1 #" "
0 0 17 3 7 #"square)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; circle and square are the arguments that are bound to mk"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";Here\342\200\231s another example, where rgb-maker takes a function"
 #" and returns a new one that remembers and uses the original function"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rgb-maker"
0 0 24 3 1 #" "
0 0 14 3 2 #"mk"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sz"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vc-append"
0 0 24 3 2 #" ("
0 0 14 3 8 #"colorize"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 14 3 2 #"sz"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"colorize"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 14 3 2 #"sz"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"colorize"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 14 3 2 #"sz"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"blue\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";> (series (rgb-maker circle)) ;mk is remembered as a circle, sz is "
 #"fed by series"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";> (series (rgb-maker square)) ;mk is remembered as a square, sz is "
 #"fed by series"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";> (rgb-maker "
0 0 17 3 91
(
 #"circle) returns #<procedure:...t-quickstart.rkt:129:2> because rgb-m"
 #"aker returns a function"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; series is calling mk and providing a size for mk and then prints o"
 #"ut the pictures"
) 0 0 24 29 1 #"\n"
0 0 17 3 132
(
 #";Note how composing functions via rgb-maker creates a different alig"
 #"nment of objects within the picture compared to using rgb-series"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";That's because when vc-append and series get called are not in the "
 #"same order"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";This method takes in a method that generates a picture and then tak"
 #"es that picture and sends it to the frame function"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; mk is the function is accepts and 20 is the value that it supplies"
 #" to mk to be used"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"frameIt"
0 0 24 3 1 #" "
0 0 14 3 2 #"mk"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"frame"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mk"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 2 #" ("
0 0 17 3 7 #"frameIt"
0 0 17 3 2 #" ("
0 0 17 3 9 #"rgb-maker"
0 0 17 3 1 #" "
0 0 17 3 8 #"circle))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 6 #";Lists"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";The list function takes any number of arguments and returns a list "
 #"containing the given values"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 12 #" (list \"red\""
0 0 17 3 8 #" \"green\""
0 0 17 3 1 #" "
0 0 17 3 7 #"\"blue\")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";'"
0 0 17 3 1 #"("
0 0 17 3 5 #"\"red\""
0 0 17 3 1 #" "
0 0 17 3 7 #"\"green\""
0 0 17 3 1 #" "
0 0 17 3 7 #"\"blue\")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 6 #"circle"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 3 #") ("
0 0 17 3 6 #"square"
0 0 17 3 1 #" "
0 0 17 3 4 #"10))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";> "
0 0 17 3 2 #"'("
0 15           4 17 685
(
 #"(10 10 0 10 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-"
 #"set-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f defa"
 #"ult normal normal #f default #f aligned)) (set-smoothing unsmoothed)"
 #" (set-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f"
 #") (set-background (255 255 255 1.0)) (set-text-background (255 255 2"
 #"55 1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) ("
 #"set-clipping-region (#t (((((0.0 . 0.0) (10.0 . 0.0) (10.0 . 10.0) ("
 #"0.0 . 10.0)))) . any))) (do-set-brush! ((255 255 255 1.0) transparen"
 #"t #f #f #f)) (draw-ellipse 0 0 10 10) (do-set-brush! ((255 255 255 1"
 #".0) solid #f #f #f)) (do-set-pen! ((0 0 0 1.0) 1 solid round round #"
 #"f))))"
) 0 0 17 3 1 #" "
0 15           4 17 675
(
 #"(10 10 0 10 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-"
 #"set-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f defa"
 #"ult normal normal #f default #f aligned)) (set-smoothing unsmoothed)"
 #" (set-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f"
 #") (set-background (255 255 255 1.0)) (set-text-background (255 255 2"
 #"55 1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) ("
 #"set-clipping-region (#t (((((0.0 . 0.0) (10.0 . 0.0) (10.0 . 10.0) ("
 #"0.0 . 10.0)))) . any))) (do-set-brush! ((0 0 0 1.0) solid #f #f #f))"
 #" (draw-rectangle 0 0 10 10) (do-set-brush! ((255 255 255 1.0) solid "
 #"#f #f #f)) (do-set-pen! ((0 0 0 1.0) 1 solid round round #f))))"
) 0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";result parentheses are printed in blue, unlike expression parenthes"
 #"es"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 141
(
 #";The map function takes a list and a function to apply to each eleme"
 #"nt of the list; it returns a ne"
 #"w list to combine the function\342\200\231s results"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";p is a picture"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";the map function is getting the list of colors, that much is obviou"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 153
(
 #";the map function is also getting a function. The function is the la"
 #"mbda that takes in a color argument, calls colorize with that color "
 #"and a picture (p)"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";so, map calls the lambda providing p and a color for each item in t"
 #"he list"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";the output is a new list of colorized pictures"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"rainbow"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"colorize"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 9 #" (rainbow"
0 0 17 3 8 #" (square"
0 0 17 3 1 #" "
0 0 17 3 3 #"5))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #"'("
0 15           4 17 938
(
 #"(5 5 0 5 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set"
 #"-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f default"
 #" normal normal #f default #f aligned)) (set-smoothing unsmoothed) (s"
 #"et-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f) ("
 #"set-background (255 255 255 1.0)) (set-text-background (255 255 255 "
 #"1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) (set"
 #"-clipping-region (#t (((((0.0 . 0.0) (5.0 . 0.0) (5.0 . 5.0) (0.0 . "
 #"5.0)))) . any))) (do-set-pen! ((255 0 0 1.0) 1 solid round round #f)"
 #") (do-set-brush! ((255 0 0 1.0) solid #f #f #f)) (set-text-foregroun"
 #"d (255 0 0 1.0)) (do-set-brush! ((255 0 0 1.0) solid #f #f #f)) (dra"
 #"w-rectangle 0 0 5 5) (do-set-brush! ((255 0 0 1.0) solid #f #f #f)) "
 #"(do-set-pen! ((255 0 0 1.0) 1 solid round round #f)) (do-set-pen! (("
 #"0 0 0 1.0) 1 solid round round #f)) (do-set-brush! ((255 255 255 1.0"
 #") solid #f #f #f)) (set-text-foreground (0 0 0 1.0))))"
) 0 0 17 3 1 #" "
0 15           4 17 950
(
 #"(5 5 0 5 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set"
 #"-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f default"
 #" normal normal #f default #f aligned)) (set-smoothing unsmoothed) (s"
 #"et-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f) ("
 #"set-background (255 255 255 1.0)) (set-text-background (255 255 255 "
 #"1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) (set"
 #"-clipping-region (#t (((((0.0 . 0.0) (5.0 . 0.0) (5.0 . 5.0) (0.0 . "
 #"5.0)))) . any))) (do-set-pen! ((255 165 0 1.0) 1 solid round round #"
 #"f)) (do-set-brush! ((255 165 0 1.0) solid #f #f #f)) (set-text-foreg"
 #"round (255 165 0 1.0)) (do-set-brush! ((255 165 0 1.0) solid #f #f #"
 #"f)) (draw-rectangle 0 0 5 5) (do-set-brush! ((255 165 0 1.0) solid #"
 #"f #f #f)) (do-set-pen! ((255 165 0 1.0) 1 solid round round #f)) (do"
 #"-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set-brush! ((255"
 #" 255 255 1.0) solid #f #f #f)) (set-text-foreground (0 0 0 1.0))))"
) 0 0 17 3 1 #" "
0 15           4 17 950
(
 #"(5 5 0 5 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set"
 #"-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f default"
 #" normal normal #f default #f aligned)) (set-smoothing unsmoothed) (s"
 #"et-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f) ("
 #"set-background (255 255 255 1.0)) (set-text-background (255 255 255 "
 #"1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) (set"
 #"-clipping-region (#t (((((0.0 . 0.0) (5.0 . 0.0) (5.0 . 5.0) (0.0 . "
 #"5.0)))) . any))) (do-set-pen! ((255 255 0 1.0) 1 solid round round #"
 #"f)) (do-set-brush! ((255 255 0 1.0) solid #f #f #f)) (set-text-foreg"
 #"round (255 255 0 1.0)) (do-set-brush! ((255 255 0 1.0) solid #f #f #"
 #"f)) (draw-rectangle 0 0 5 5) (do-set-brush! ((255 255 0 1.0) solid #"
 #"f #f #f)) (do-set-pen! ((255 255 0 1.0) 1 solid round round #f)) (do"
 #"-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set-brush! ((255"
 #" 255 255 1.0) solid #f #f #f)) (set-text-foreground (0 0 0 1.0))))"
) 0 0 17 3 1 #" "
0 15           4 17 938
(
 #"(5 5 0 5 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set"
 #"-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f default"
 #" normal normal #f default #f aligned)) (set-smoothing unsmoothed) (s"
 #"et-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f) ("
 #"set-background (255 255 255 1.0)) (set-text-background (255 255 255 "
 #"1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) (set"
 #"-clipping-region (#t (((((0.0 . 0.0) (5.0 . 0.0) (5.0 . 5.0) (0.0 . "
 #"5.0)))) . any))) (do-set-pen! ((0 255 0 1.0) 1 solid round round #f)"
 #") (do-set-brush! ((0 255 0 1.0) solid #f #f #f)) (set-text-foregroun"
 #"d (0 255 0 1.0)) (do-set-brush! ((0 255 0 1.0) solid #f #f #f)) (dra"
 #"w-rectangle 0 0 5 5) (do-set-brush! ((0 255 0 1.0) solid #f #f #f)) "
 #"(do-set-pen! ((0 255 0 1.0) 1 solid round round #f)) (do-set-pen! (("
 #"0 0 0 1.0) 1 solid round round #f)) (do-set-brush! ((255 255 255 1.0"
 #") solid #f #f #f)) (set-text-foreground (0 0 0 1.0))))"
) 0 0 17 3 1 #" "
0 15           4 17 938
(
 #"(5 5 0 5 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set"
 #"-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f default"
 #" normal normal #f default #f aligned)) (set-smoothing unsmoothed) (s"
 #"et-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f) ("
 #"set-background (255 255 255 1.0)) (set-text-background (255 255 255 "
 #"1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) (set"
 #"-clipping-region (#t (((((0.0 . 0.0) (5.0 . 0.0) (5.0 . 5.0) (0.0 . "
 #"5.0)))) . any))) (do-set-pen! ((0 0 255 1.0) 1 solid round round #f)"
 #") (do-set-brush! ((0 0 255 1.0) solid #f #f #f)) (set-text-foregroun"
 #"d (0 0 255 1.0)) (do-set-brush! ((0 0 255 1.0) solid #f #f #f)) (dra"
 #"w-rectangle 0 0 5 5) (do-set-brush! ((0 0 255 1.0) solid #f #f #f)) "
 #"(do-set-pen! ((0 0 255 1.0) 1 solid round round #f)) (do-set-pen! (("
 #"0 0 0 1.0) 1 solid round round #f)) (do-set-brush! ((255 255 255 1.0"
 #") solid #f #f #f)) (set-text-foreground (0 0 0 1.0))))"
) 0 0 17 3 1 #" "
0 15           4 17 956
(
 #"(5 5 0 5 ((do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set"
 #"-brush! ((255 255 255 1.0) solid #f #f #f)) (set-font (12 #f default"
 #" normal normal #f default #f aligned)) (set-smoothing unsmoothed) (s"
 #"et-text-mode transparent) (set-alpha 1.0) (set-clipping-region #f) ("
 #"set-background (255 255 255 1.0)) (set-text-background (255 255 255 "
 #"1.0)) (set-text-foreground (0 0 0 1.0)) (set-smoothing aligned) (set"
 #"-clipping-region (#t (((((0.0 . 0.0) (5.0 . 0.0) (5.0 . 5.0) (0.0 . "
 #"5.0)))) . any))) (do-set-pen! ((160 32 240 1.0) 1 solid round round "
 #"#f)) (do-set-brush! ((160 32 240 1.0) solid #f #f #f)) (set-text-for"
 #"eground (160 32 240 1.0)) (do-set-brush! ((160 32 240 1.0) solid #f "
 #"#f #f)) (draw-rectangle 0 0 5 5) (do-set-brush! ((160 32 240 1.0) so"
 #"lid #f #f #f)) (do-set-pen! ((160 32 240 1.0) 1 solid round round #f"
 #")) (do-set-pen! ((0 0 0 1.0) 1 solid round round #f)) (do-set-brush!"
 #" ((255 255 255 1.0) solid #f #f #f)) (set-text-foreground (0 0 0 1.0"
 #"))))"
) 0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 140
(
 #";apply takes a function and a list, but a function given to apply sh"
 #"ould take all of the arguments at once, instead of each one individu"
 #"ally"
) 0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";The apply function is especially useful with functions that take an"
 #"y number of arguments, such as vc-append"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 8 #" (apply "
0 0 17 3 9 #"vc-append"
0 0 17 3 2 #" ("
0 0 17 3 7 #"rainbow"
0 0 17 3 2 #" ("
0 0 17 3 6 #"square"
0 0 17 3 1 #" "
0 0 17 3 4 #"5)))"
0 0 24 29 1 #"\n"
0 0 17 3 128
(
 #";The apply function bridges the gap between a function that wants ma"
 #"ny arguments and a list of those arguments as a single value"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";In this case vc-append does not want a list but using apply we can "
 #"get the same results"
) 0           0
